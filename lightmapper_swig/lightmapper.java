/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class lightmapper implements lightmapperConstants {
  public static SWIGTYPE_p_lm_context lmCreate(int hemisphereSize, float zNear, float zFar, float clearR, float clearG, float clearB, int interpolationPasses, float interpolationThreshold, float cameraToSurfaceDistanceModifier) {
    long cPtr = lightmapperJNI.lmCreate__SWIG_0(hemisphereSize, zNear, zFar, clearR, clearG, clearB, interpolationPasses, interpolationThreshold, cameraToSurfaceDistanceModifier);
    return (cPtr == 0) ? null : new SWIGTYPE_p_lm_context(cPtr, false);
  }

  public static SWIGTYPE_p_lm_context lmCreate(int hemisphereSize, float zNear, float zFar, float clearR, float clearG, float clearB, int interpolationPasses, float interpolationThreshold) {
    long cPtr = lightmapperJNI.lmCreate__SWIG_1(hemisphereSize, zNear, zFar, clearR, clearG, clearB, interpolationPasses, interpolationThreshold);
    return (cPtr == 0) ? null : new SWIGTYPE_p_lm_context(cPtr, false);
  }

  public static void lmSetHemisphereWeights(SWIGTYPE_p_lm_context ctx, SWIGTYPE_p_f_float_p_void__float f, SWIGTYPE_p_void userdata) {
    lightmapperJNI.lmSetHemisphereWeights(SWIGTYPE_p_lm_context.getCPtr(ctx), SWIGTYPE_p_f_float_p_void__float.getCPtr(f), SWIGTYPE_p_void.getCPtr(userdata));
  }

  public static void lmSetTargetLightmap(SWIGTYPE_p_lm_context ctx, SWIGTYPE_p_float outLightmap, int w, int h, int c) {
    lightmapperJNI.lmSetTargetLightmap(SWIGTYPE_p_lm_context.getCPtr(ctx), SWIGTYPE_p_float.getCPtr(outLightmap), w, h, c);
  }

  public static void lmSetGeometry(SWIGTYPE_p_lm_context ctx, SWIGTYPE_p_float transformationMatrix, int positionsType, SWIGTYPE_p_void positionsXYZ, int positionsStride, int normalsType, SWIGTYPE_p_void normalsXYZ, int normalsStride, int lightmapCoordsType, SWIGTYPE_p_void lightmapCoordsUV, int lightmapCoordsStride, int count, int indicesType, SWIGTYPE_p_void indices) {
    lightmapperJNI.lmSetGeometry__SWIG_0(SWIGTYPE_p_lm_context.getCPtr(ctx), SWIGTYPE_p_float.getCPtr(transformationMatrix), positionsType, SWIGTYPE_p_void.getCPtr(positionsXYZ), positionsStride, normalsType, SWIGTYPE_p_void.getCPtr(normalsXYZ), normalsStride, lightmapCoordsType, SWIGTYPE_p_void.getCPtr(lightmapCoordsUV), lightmapCoordsStride, count, indicesType, SWIGTYPE_p_void.getCPtr(indices));
  }

  public static void lmSetGeometry(SWIGTYPE_p_lm_context ctx, SWIGTYPE_p_float transformationMatrix, int positionsType, SWIGTYPE_p_void positionsXYZ, int positionsStride, int normalsType, SWIGTYPE_p_void normalsXYZ, int normalsStride, int lightmapCoordsType, SWIGTYPE_p_void lightmapCoordsUV, int lightmapCoordsStride, int count, int indicesType) {
    lightmapperJNI.lmSetGeometry__SWIG_1(SWIGTYPE_p_lm_context.getCPtr(ctx), SWIGTYPE_p_float.getCPtr(transformationMatrix), positionsType, SWIGTYPE_p_void.getCPtr(positionsXYZ), positionsStride, normalsType, SWIGTYPE_p_void.getCPtr(normalsXYZ), normalsStride, lightmapCoordsType, SWIGTYPE_p_void.getCPtr(lightmapCoordsUV), lightmapCoordsStride, count, indicesType);
  }

  public static void lmSetGeometry(SWIGTYPE_p_lm_context ctx, SWIGTYPE_p_float transformationMatrix, int positionsType, SWIGTYPE_p_void positionsXYZ, int positionsStride, int normalsType, SWIGTYPE_p_void normalsXYZ, int normalsStride, int lightmapCoordsType, SWIGTYPE_p_void lightmapCoordsUV, int lightmapCoordsStride, int count) {
    lightmapperJNI.lmSetGeometry__SWIG_2(SWIGTYPE_p_lm_context.getCPtr(ctx), SWIGTYPE_p_float.getCPtr(transformationMatrix), positionsType, SWIGTYPE_p_void.getCPtr(positionsXYZ), positionsStride, normalsType, SWIGTYPE_p_void.getCPtr(normalsXYZ), normalsStride, lightmapCoordsType, SWIGTYPE_p_void.getCPtr(lightmapCoordsUV), lightmapCoordsStride, count);
  }

  public static int lmBegin(SWIGTYPE_p_lm_context ctx, SWIGTYPE_p_int outViewport4, SWIGTYPE_p_float outView4x4, SWIGTYPE_p_float outProjection4x4) {
    return lightmapperJNI.lmBegin(SWIGTYPE_p_lm_context.getCPtr(ctx), SWIGTYPE_p_int.getCPtr(outViewport4), SWIGTYPE_p_float.getCPtr(outView4x4), SWIGTYPE_p_float.getCPtr(outProjection4x4));
  }

  public static float lmProgress(SWIGTYPE_p_lm_context ctx) {
    return lightmapperJNI.lmProgress(SWIGTYPE_p_lm_context.getCPtr(ctx));
  }

  public static void lmEnd(SWIGTYPE_p_lm_context ctx) {
    lightmapperJNI.lmEnd(SWIGTYPE_p_lm_context.getCPtr(ctx));
  }

  public static void lmDestroy(SWIGTYPE_p_lm_context ctx) {
    lightmapperJNI.lmDestroy(SWIGTYPE_p_lm_context.getCPtr(ctx));
  }

  public static float lmImageMin(SWIGTYPE_p_float image, int w, int h, int c, int m) {
    return lightmapperJNI.lmImageMin__SWIG_0(SWIGTYPE_p_float.getCPtr(image), w, h, c, m);
  }

  public static float lmImageMin(SWIGTYPE_p_float image, int w, int h, int c) {
    return lightmapperJNI.lmImageMin__SWIG_1(SWIGTYPE_p_float.getCPtr(image), w, h, c);
  }

  public static float lmImageMax(SWIGTYPE_p_float image, int w, int h, int c, int m) {
    return lightmapperJNI.lmImageMax__SWIG_0(SWIGTYPE_p_float.getCPtr(image), w, h, c, m);
  }

  public static float lmImageMax(SWIGTYPE_p_float image, int w, int h, int c) {
    return lightmapperJNI.lmImageMax__SWIG_1(SWIGTYPE_p_float.getCPtr(image), w, h, c);
  }

  public static void lmImageAdd(SWIGTYPE_p_float image, int w, int h, int c, float value, int m) {
    lightmapperJNI.lmImageAdd__SWIG_0(SWIGTYPE_p_float.getCPtr(image), w, h, c, value, m);
  }

  public static void lmImageAdd(SWIGTYPE_p_float image, int w, int h, int c, float value) {
    lightmapperJNI.lmImageAdd__SWIG_1(SWIGTYPE_p_float.getCPtr(image), w, h, c, value);
  }

  public static void lmImageScale(SWIGTYPE_p_float image, int w, int h, int c, float factor, int m) {
    lightmapperJNI.lmImageScale__SWIG_0(SWIGTYPE_p_float.getCPtr(image), w, h, c, factor, m);
  }

  public static void lmImageScale(SWIGTYPE_p_float image, int w, int h, int c, float factor) {
    lightmapperJNI.lmImageScale__SWIG_1(SWIGTYPE_p_float.getCPtr(image), w, h, c, factor);
  }

  public static void lmImagePower(SWIGTYPE_p_float image, int w, int h, int c, float exponent, int m) {
    lightmapperJNI.lmImagePower__SWIG_0(SWIGTYPE_p_float.getCPtr(image), w, h, c, exponent, m);
  }

  public static void lmImagePower(SWIGTYPE_p_float image, int w, int h, int c, float exponent) {
    lightmapperJNI.lmImagePower__SWIG_1(SWIGTYPE_p_float.getCPtr(image), w, h, c, exponent);
  }

  public static void lmImageDilate(SWIGTYPE_p_float image, SWIGTYPE_p_float outImage, int w, int h, int c) {
    lightmapperJNI.lmImageDilate(SWIGTYPE_p_float.getCPtr(image), SWIGTYPE_p_float.getCPtr(outImage), w, h, c);
  }

  public static void lmImageSmooth(SWIGTYPE_p_float image, SWIGTYPE_p_float outImage, int w, int h, int c) {
    lightmapperJNI.lmImageSmooth(SWIGTYPE_p_float.getCPtr(image), SWIGTYPE_p_float.getCPtr(outImage), w, h, c);
  }

  public static void lmImageDownsample(SWIGTYPE_p_float image, SWIGTYPE_p_float outImage, int w, int h, int c) {
    lightmapperJNI.lmImageDownsample(SWIGTYPE_p_float.getCPtr(image), SWIGTYPE_p_float.getCPtr(outImage), w, h, c);
  }

  public static void lmImageFtoUB(SWIGTYPE_p_float image, SWIGTYPE_p_unsigned_char outImage, int w, int h, int c, float max) {
    lightmapperJNI.lmImageFtoUB__SWIG_0(SWIGTYPE_p_float.getCPtr(image), SWIGTYPE_p_unsigned_char.getCPtr(outImage), w, h, c, max);
  }

  public static void lmImageFtoUB(SWIGTYPE_p_float image, SWIGTYPE_p_unsigned_char outImage, int w, int h, int c) {
    lightmapperJNI.lmImageFtoUB__SWIG_1(SWIGTYPE_p_float.getCPtr(image), SWIGTYPE_p_unsigned_char.getCPtr(outImage), w, h, c);
  }

  public static int lmImageSaveTGAub(String filename, SWIGTYPE_p_unsigned_char image, int w, int h, int c) {
    return lightmapperJNI.lmImageSaveTGAub(filename, SWIGTYPE_p_unsigned_char.getCPtr(image), w, h, c);
  }

  public static int lmImageSaveTGAf(String filename, SWIGTYPE_p_float image, int w, int h, int c, float max) {
    return lightmapperJNI.lmImageSaveTGAf__SWIG_0(filename, SWIGTYPE_p_float.getCPtr(image), w, h, c, max);
  }

  public static int lmImageSaveTGAf(String filename, SWIGTYPE_p_float image, int w, int h, int c) {
    return lightmapperJNI.lmImageSaveTGAf__SWIG_1(filename, SWIGTYPE_p_float.getCPtr(image), w, h, c);
  }

}
