#version 400 core

const int MAX_POINT_LIGHTS = 64;

struct ObjectProperties {
    float texturesEnabled;
    float specularIntensity;
    vec3 color;
    vec3 tint;
    samplerCube cubemapSampler;
    sampler2D diffuseSampler;
};

struct PointLight {
    vec3 position;
    vec3 color;
    float specularDamper;

    float constant;
    float linear;
    float quadratic;
};

struct DirectionalLight {
    vec3 direction;
    vec3 color;
    float specularDamper;
};

struct AmbientLight {
    float intensity;
    vec3 color;
};

struct RenderMetadata {
    vec3 cameraPosition;

    vec2 resolution;

    float cameraNear;
    float cameraFar;

    float pointLightCount;
    float ambientLightExists;
    float directionalLightExists;
};

struct PostProcessingMetadata {
    float inversionIntensity;
};

struct ProjectionTextures {
    sampler2D diffuse;
    sampler2D depth;
};

in VertexOutput {
    vec4 vertexPosition;
    vec2 texCoords;
    vec3 normal;
    vec3 worldFragPos;
} vertexOutput;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 FragDepth;

uniform PointLight points[MAX_POINT_LIGHTS];
uniform AmbientLight ambient;
uniform DirectionalLight directional;

uniform ObjectProperties properties;
uniform RenderMetadata metadata;

uniform ProjectionTextures projectionTextures;
uniform PostProcessingMetadata postProcessingMetadata;

float apiLinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0;
    float cameraNear = metadata.cameraNear;
    float cameraFar = metadata.cameraFar;
    return (1 * cameraNear * cameraFar) / (cameraFar - cameraNear - z * (cameraFar - cameraNear));
}
